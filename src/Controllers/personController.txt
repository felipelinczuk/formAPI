using formAPI.src.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace formAPI.src.Controllers;

[ApiController]
[Route("api/person")]
public class PersonController : ControllerBase
{
    private readonly AppDBContext _appDBContext;
    
    public PersonController(AppDBContext appDBContext){
        _appDBContext = appDBContext;
    }

    [HttpGet]
    public async Task<IActionResult> GetAllPerson(){
        try{
            return Ok(new {
                sucess = true,
                data = await _appDBContext.People.Where(p => p.DeletedAt == null).ToListAsync()
            });
        }
        catch(Exception e){
            System.Console.WriteLine($"\nFalhou. Erro: {e.Message}; Tipo: {e.GetType()}.");
            return StatusCode(500, new { success = false, message = $"Internal error. Details: {e.Message}"});
        } 
    }

    [HttpGet("find/{id}")]
    public async Task<IActionResult> GetPersonById(Guid id){
        try{        
            return Ok(new {
                sucess = true,
                data = await _appDBContext.People.FindAsync(id)
            });
        }
        catch(Exception e){
            System.Console.WriteLine($"\nFalhou. Erro: {e.Message}; Tipo: {e.GetType()}.");
            return StatusCode(500, new { success = false, message = $"Internal error. Details: {e.Message}"});
        }
    }

    [HttpPost("new")]
    public async Task<IActionResult> RegisterPerson(Person person){
        try{
            _appDBContext.People.Add(person);
            await _appDBContext.SaveChangesAsync();
            return await Task.FromResult(CreatedAtAction(nameof(GetPersonById), new { id = person.Id }, person));
        }
        catch(Exception e){
            System.Console.WriteLine($"\nFalhou. Erro: {e.Message}; Tipo: {e.GetType()}.");
            return StatusCode(500, new { success = false, message = $"Internal error. Details: {e.Message}"});
        }
    }

    [HttpPut("edit/{id}")]
    public async Task<IActionResult> ChangePerson(Person person, Guid id){
        try{
            var _person = _appDBContext.People.SingleOrDefault(p => p.Id == id);
        
            if(_person == null){
                return NotFound(new {
                    sucess = true,
                    data = "Person not found"
                });
            }

            _person.Name = person.Name;
            _person.CPF = person.CPF;
            _person.BirthDate = person.BirthDate;
            _person.MonthlyIncome = person.MonthlyIncome;

            await _appDBContext.SaveChangesAsync();

            return Ok(new {
                sucess = true,
                data = _person
            });
        }
        catch(Exception e){
            System.Console.WriteLine($"\nFalhou. Erro: {e.Message}; Tipo: {e.GetType()}.");
            return StatusCode(500, new { success = false, message = $"Internal error. Details: {e.Message}"});
        }
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> Remove(Guid id){
        try{
            var _person = _appDBContext.People.SingleOrDefault(p => p.Id == id);
        
            if(_person == null){
                return NotFound(new {
                    sucess = true,
                    data = "Person not found"
                });
            }

            _person.DeletePerson();

            await _appDBContext.SaveChangesAsync();

            return Ok(new {
                sucess = true,
                data = _person
            });
        }
        catch(Exception e){
            System.Console.WriteLine($"\nFalhou. Erro: {e.Message}; Tipo: {e.GetType()}.");
            return StatusCode(500, new { success = false, message = $"Internal error. Details: {e.Message}"});
        }
    }

}
